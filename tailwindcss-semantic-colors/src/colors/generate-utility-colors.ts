import { ALL_COLOR_TYPES, COLOR_TYPES, TailwindCssSemanticColorsOptions } from '../options.ts';
import { Colors } from './generate-colors.ts';

/**
 * Holds all tailwind colors with an index.
 */
type UtilityColorStep =
  | { index: 0; name: '50' }
  | { index: 1; name: '100' }
  | { index: 2; name: '200' }
  | { index: 3; name: '300' }
  | { index: 4; name: '400' }
  | { index: 5; name: '500' }
  | { index: 6; name: '600' }
  | { index: 7; name: '700' }
  | { index: 8; name: '800' }
  | { index: 9; name: '900' }
  | { index: 10; name: '950' };

const TAILWINDCSS_STEP_50: UtilityColorStep = { index: 0, name: '50' };
const TAILWINDCSS_STEP_100: UtilityColorStep = { index: 1, name: '100' };
const TAILWINDCSS_STEP_200: UtilityColorStep = { index: 2, name: '200' };
const TAILWINDCSS_STEP_300: UtilityColorStep = { index: 3, name: '300' };
const TAILWINDCSS_STEP_400: UtilityColorStep = { index: 4, name: '400' };
const TAILWINDCSS_STEP_500: UtilityColorStep = { index: 5, name: '500' };
const TAILWINDCSS_STEP_600: UtilityColorStep = { index: 6, name: '600' };
const TAILWINDCSS_STEP_700: UtilityColorStep = { index: 7, name: '700' };
const TAILWINDCSS_STEP_800: UtilityColorStep = { index: 8, name: '800' };
const TAILWINDCSS_STEP_900: UtilityColorStep = { index: 9, name: '900' };
const TAILWINDCSS_STEP_950: UtilityColorStep = { index: 10, name: '950' };

const UTILITY_COLOR_STEPS: UtilityColorStep[] = [
  TAILWINDCSS_STEP_50,
  TAILWINDCSS_STEP_100,
  TAILWINDCSS_STEP_200,
  TAILWINDCSS_STEP_300,
  TAILWINDCSS_STEP_400,
  TAILWINDCSS_STEP_500,
  TAILWINDCSS_STEP_600,
  TAILWINDCSS_STEP_700,
  TAILWINDCSS_STEP_800,
  TAILWINDCSS_STEP_900,
  TAILWINDCSS_STEP_950,
];

/**
 * Generates all utility colors.
 *
 * Utility colors are colors used as a basis for further colors.
 * The idea of the plugin `@ilijazm/tailwindcss-semantic-colors`
 * is to introduce semantic colors that builds a layer of abstraction above the utility based approach
 * which uses colors by their names instead of their uses and provides eleven variants of them.
 *
 * So utility colors as defined here and generated by this function
 * are not intended to be used like the existing utility colors provided by tailwind.
 * Rather, they are necessary in order to generate e.g. surface colors.
 *
 * Utility colors are all colors with the following format: `--color-<colorName>-<utilityColorStep>`.
 * E.g. `--color-primary-500`, `--color-secondary-200`, `color-tertiary-800`, etc..
 *
 * `colorName` includes all colors included in all color types meaning: semantic colors, surface colors, and content
 * colors.
 *
 * `utilityColorStep` range from 50 to 950 like in regular tailwind colors.
 *
 * @example
 * Given the color mappings `primary` and `secondary` the result would look like this:
 *
 * ```json
 * {
 *   "primary-50": "var(--color-indigo-50)",
 *   "primary-100": "var(--color-indigo-100)",
 *   "primary-200": "var(--color-indigo-200)",
 *   ...
 *   "primary-800": "var(--color-indigo-800)",
 *   "primary-900": "var(--color-indigo-900)",
 *   "primary-950": "var(--color-indigo-950)",
 *   "secondary-50": "var(--color-pink-50)",
 *   "secondary-100": "var(--color-pink-100)",
 *   ...
 * }
 * ```
 *
 * @see BASE_COLORS
 * @param options a reference to the options object.
 * @returns the generated utility colors.
 */
export class GenerateUtilityColors {
  static readonly THEME_PREFIX = `theme-`;

  private result: Colors = {};
  private options: TailwindCssSemanticColorsOptions;

  constructor(options: TailwindCssSemanticColorsOptions) {
    this.options = options;
  }

  /**
   * Generates all colors.
   *
   * @returns all colors.
   */
  generate(): Colors {
    return Object.assign({}, ...ALL_COLOR_TYPES.map((colorType) => this.generateFromColorType(colorType)));
  }

  private get themeOverrides() {
    return this.options.getThemeOverridesFor(['semanticColors', 'surfaceColors', 'contentColors']);
  }

  /**
   * Iterates over all colors in a color type and outputs the generated css rules.
   *
   * @param colorType the color type
   * @returns the generated css rules.
   */
  private generateFromColorType(colorType: COLOR_TYPES): Colors {
    const colors = this.options.get(colorType);
    return Object.assign(
      {},
      ...Object.entries(colors).map(([colorVarname, colorValues]) =>
        this.generateCssVariablesFromColor(colorType, colorVarname, colorValues),
      ),
    );
  }

  /**
   * Generates css variables from the inputted colorVarname and colorValues.
   *
   * Decides if theme variables must be generated based on if there are themeOverrides for the given color.
   *
   * Also iterates over the tailwindcss color steps which range from 90 to 950.
   *
   * @param colorType the type of the color.
   * @param colorVarname the name of the css color variable.
   * @param colorValues the values of the color variable in shades from 90 to 950.
   * @returns the generated css variables.
   */
  private generateCssVariablesFromColor(colorType: COLOR_TYPES, colorVarname: string, colorValues: string[]): Colors {
    if (this.themeOverrides.includes(colorVarname)) {
      return Object.assign(
        {},
        ...UTILITY_COLOR_STEPS.map((step) =>
          this.generateThemeCssColorVariables(colorType, colorVarname, colorValues, step),
        ),
      );
    } else {
      return Object.assign(
        {},
        ...UTILITY_COLOR_STEPS.map((step) => this.generateUnthemedCssColorVariable(colorVarname, colorValues, step)),
      );
    }
  }

  /**
   * Generates all css theme variables for each theme as well was the color variable.
   *
   * This method should only be called if there is a
   *
   * @see GenerateUtilityColors#generateThemeOverridesOfCssColorVariable
   * @see GenerateUtilityColors#generateThemedCssColorVariable
   * @param colorType the type of the color.
   * @param colorVarname the name of the css color variable.
   * @param colorValues the values of the color variable in shades from 90 to 950.
   * @param step the tailwindcss step value that is in between 90 and 950.
   * @returns the generated theme and color variables.
   */
  private generateThemeCssColorVariables(
    colorType: COLOR_TYPES,
    colorVarname: string,
    colorValues: string[],
    step: UtilityColorStep,
  ): Colors {
    return Object.assign(
      {},
      this.generateThemeOverridesOfCssColorVariable(colorType, colorVarname, colorValues, step),
      this.generateThemedCssColorVariable(colorVarname, step),
    );
  }

  /**
   * Generates all css theme variables for each theme.
   *
   * For that it checks if there is a theme override defined in the options and if not default to the default theme.
   *
   * The generated theme variables will have the following format: `--theme-{theme}-color-{colorVarname}-{step}`.
   *
   * @example This example demonstrates
   *
   * ```ts
   * this.generateThemeOverridesOfCssColorVariable(
   *   SEMANTIC_COLORS_KEY,
   *   "primary",
   *   ["var(--color-indigo-50)", "var(--color-indigo-100)", ..., "var(--color-indigo-950)"],
   *   TAILWINDCSS_STEP_200,
   * );
   * ```
   *
   * Assuming that the themes configured are "light" and "dark", this yields the following results:
   *
   * ```json
   * {
   *   "--theme-light-color-primary-200": "var(--color-indigo-200)",
   *   "--theme-dark-color-primary-200": "var(--color-indigo-200)"
   * }
   * ```
   *
   * @param colorType the type of the color.
   * @param colorVarname the name of the css color variable.
   * @param colorValues the values of the color variable in shades from 90 to 950.
   * @param step the tailwindcss step value that is in between 90 and 950.
   * @returns the generated theme variables.
   */
  private generateThemeOverridesOfCssColorVariable(
    colorType: COLOR_TYPES,
    colorVarname: string,
    colorValues: string[],
    step: UtilityColorStep,
  ): Colors {
    return Object.assign(
      {},
      ...this.options.themes.map((theme) => ({
        [`--${GenerateUtilityColors.THEME_PREFIX}-${theme}-color-${colorVarname}-${step}`]:
          this.options.themeOverrides[theme]?.[colorType]?.[colorVarname]?.[step.index] ?? colorValues[step.index]!,
      })),
    );
  }

  /**
   * Generates a themed css color variable.
   *
   * The generated color variable will have the following format: `--color-{colorVarname}-{step}`
   *
   * @example The following example demonstrates a typical use case.
   *
   * ```ts
   * this.generateUnthemedColor(`primary`, TAILWINDCSS_STEP_200);
   * ```
   *
   * Assuming that the default theme is set to `light`, this yields the following result:
   *
   * ```json
   * {
   *   "--color-primary-50": "var(--theme-light-primary-50)"
   * }
   * ```
   *
   * @see GenerateUtilityColors#generateUnthemedCssColorVariable
   * @param colorVarname the name of the css color variable.
   * @param step the tailwindcss step value that is in between 90 and 950.
   * @returns the generated color variable.
   */
  private generateThemedCssColorVariable(colorVarname: string, step: UtilityColorStep): Colors {
    const themePrefix = `--${GenerateUtilityColors.THEME_PREFIX}-${this.options.defaultTheme}`;
    const cssColorName = `color-${colorVarname}-${step.name}`;
    return { [`--${cssColorName}`]: `${themePrefix}-${cssColorName}` };
  }

  /**
   * Generates an unthemed css color variable.
   *
   * The opposite of an unthemed variable is a themed one.
   * The difference between a themed and an unthemed variable is
   * that the themed color variable's color is set via a proxy theme variable that hold the color value.
   * Unthemed color variable's set the color directly.
   *
   * A themed variable looks like this example:
   *
   * ```css
   * --color-primary-50: var(--theme-light-color-primary-50);
   * ```
   *
   * An unthemed variable looks like this example:
   *
   * ```css
   * --color-primary-50: var(--color-indigo-50);
   * ```
   *
   * The generated color variable will have the following format: `--color-{colorVarname}-{step}`
   *
   * @example The following example demonstrates a typical use case.
   *
   * ```ts
   * this.generateUnthemedColor(`primary`, ["var(--color-indigo-50)", "var(--color-indigo-100)", ..., "var(--color-indigo-950)"], TAILWINDCSS_STEP_200);
   * ```
   *
   * This yields the following result:
   *
   * ```json
   * {
   *   "--color-primary-50": "var(--color-indigo-100)"
   * }
   * ```
   *
   * @see GenerateUtilityColors#generateThemedCssColorVariable
   * @param colorVarname the name of the css color variable.
   * @param colorValues the values of the color variable in shades from 90 to 950.
   * @param step the tailwindcss step value that is in between 90 and 950.
   * @returns the generated color.
   */
  private generateUnthemedCssColorVariable(
    colorVarname: string,
    colorValues: string[],
    step: UtilityColorStep,
  ): Colors {
    return { [`--color-${colorVarname}-${step.name}`]: colorValues[step.index]! };
  }
}
