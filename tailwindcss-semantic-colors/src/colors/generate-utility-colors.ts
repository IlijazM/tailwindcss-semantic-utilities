import { COLOR_TYPES } from '../options.ts';
import { ColorMapping, GenerateColors } from './abstract-generate-colors.ts';

interface UtilityColorStepType extends ColorMapping {
  leftSide: number;
  rightSide: number;
}

/**
 * Holds all tailwind colors with an index.
 */
type UtilityColorStep = UtilityColorStepType &
  (
    | { leftSide: 0; rightSide: 50 }
    | { leftSide: 1; rightSide: 100 }
    | { leftSide: 2; rightSide: 200 }
    | { leftSide: 3; rightSide: 300 }
    | { leftSide: 4; rightSide: 400 }
    | { leftSide: 5; rightSide: 500 }
    | { leftSide: 6; rightSide: 600 }
    | { leftSide: 7; rightSide: 700 }
    | { leftSide: 8; rightSide: 800 }
    | { leftSide: 9; rightSide: 900 }
    | { leftSide: 10; rightSide: 950 }
  );

const TAILWINDCSS_STEP_50: UtilityColorStep = { leftSide: 0, rightSide: 50 };
const TAILWINDCSS_STEP_100: UtilityColorStep = { leftSide: 1, rightSide: 100 };
const TAILWINDCSS_STEP_200: UtilityColorStep = { leftSide: 2, rightSide: 200 };
const TAILWINDCSS_STEP_300: UtilityColorStep = { leftSide: 3, rightSide: 300 };
const TAILWINDCSS_STEP_400: UtilityColorStep = { leftSide: 4, rightSide: 400 };
const TAILWINDCSS_STEP_500: UtilityColorStep = { leftSide: 5, rightSide: 500 };
const TAILWINDCSS_STEP_600: UtilityColorStep = { leftSide: 6, rightSide: 600 };
const TAILWINDCSS_STEP_700: UtilityColorStep = { leftSide: 7, rightSide: 700 };
const TAILWINDCSS_STEP_800: UtilityColorStep = { leftSide: 8, rightSide: 800 };
const TAILWINDCSS_STEP_900: UtilityColorStep = { leftSide: 9, rightSide: 900 };
const TAILWINDCSS_STEP_950: UtilityColorStep = { leftSide: 10, rightSide: 950 };

const UTILITY_COLOR_STEPS: UtilityColorStep[] = [
  TAILWINDCSS_STEP_50,
  TAILWINDCSS_STEP_100,
  TAILWINDCSS_STEP_200,
  TAILWINDCSS_STEP_300,
  TAILWINDCSS_STEP_400,
  TAILWINDCSS_STEP_500,
  TAILWINDCSS_STEP_600,
  TAILWINDCSS_STEP_700,
  TAILWINDCSS_STEP_800,
  TAILWINDCSS_STEP_900,
  TAILWINDCSS_STEP_950,
];

/**
 * Generates all utility colors.
 *
 * Utility colors are colors used as a basis for further colors.
 * The idea of the plugin `@ilijazm/tailwindcss-semantic-colors`
 * is to introduce semantic colors that builds a layer of abstraction above the utility based approach
 * which uses colors by their names instead of their uses and provides eleven variants of them.
 *
 * So utility colors as defined here and generated by this function
 * are not intended to be used like the existing utility colors provided by tailwind.
 * Rather, they are necessary in order to generate e.g. surface colors.
 *
 * Utility colors are all colors with the following format: `--color-<colorName>-<utilityColorStep>`.
 * E.g. `--color-primary-500`, `--color-secondary-200`, `color-tertiary-800`, etc..
 *
 * `colorName` includes all colors included in all color types meaning: semantic colors, surface colors, and content
 * colors.
 *
 * `utilityColorStep` range from 50 to 950 like in regular tailwind colors.
 *
 * @example
 * Given the color mappings `primary` and `secondary` the result would look like this:
 *
 * ```json
 * {
 *   "primary-50": "var(--color-indigo-50)",
 *   "primary-100": "var(--color-indigo-100)",
 *   "primary-200": "var(--color-indigo-200)",
 *   ...
 *   "primary-800": "var(--color-indigo-800)",
 *   "primary-900": "var(--color-indigo-900)",
 *   "primary-950": "var(--color-indigo-950)",
 *   "secondary-50": "var(--color-pink-50)",
 *   "secondary-100": "var(--color-pink-100)",
 *   ...
 * }
 * ```
 *
 * @see BASE_COLORS
 * @param options a reference to the options object.
 * @returns the generated utility colors.
 */
export class GenerateUtilityColors extends GenerateColors<UtilityColorStep> {
  protected get mapping() {
    return UTILITY_COLOR_STEPS;
  }

  protected generateCssColorVarname(colorVarname: string, step: UtilityColorStep): string {
    return `--color-${colorVarname}-${step.rightSide}`;
  }

  protected generateCssColorValue(colorValues: string[], step: UtilityColorStep): string {
    return colorValues[step.leftSide]!;
  }

  protected generateThemedCssColorValue(
    colorType: COLOR_TYPES,
    colorVarname: string,
    colorValues: string[],
    step: UtilityColorStep,
    theme: string,
  ): string | undefined {
    return this.options.themeOverrides[theme]?.[colorType]?.[colorVarname]?.[step.rightSide];
  }
}
