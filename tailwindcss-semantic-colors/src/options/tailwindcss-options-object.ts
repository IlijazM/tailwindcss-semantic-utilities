export class TailwindcssOptionsObject<OptionsType extends Record<string, any>> {
  private options: OptionsType;

  constructor(options: unknown, defaultOptions: OptionsType) {
    if (typeof options === 'object' && options !== null) {
      this.options = { ...defaultOptions, ...options };
    } else {
      this.options = defaultOptions;
    }
  }

  /**
   * Retrieves the value associated with the given `key` from `this.options`.
   *
   * This method returns a combined result constructed as follows:
   *
   * 1. If `this.options` contains an entry exactly matching `key`, its value is used as the starting object.
   *
   * 2. Then, all entries in `this.options` whose keys begin with `${key}.` (using dot notation) are
   *    interpreted as nested paths extending or overriding parts of the starting object.
   *    These nested keys are parsed and merged into the resulting object.
   *
   * This allows you to specify partial configurations using dot notation keys that augment or
   * override properties within the main object associated with `key`.
   *
   * **Important:** If you want to completely replace the value associated with `key`, do not use dot notation keys.
   * Instead, set the entire value at `key` directly.
   *
   * @example This is an example based on extending an object using the dot notion.
   *
   * ```ts
   * const options = new TailwindcssOptionsObject({
   *   colors: { primary: "blue" },
   *   "colors.success": "green"
   * }, {});
   *
   * options.get("colors"); // returns { primary: "blue", success: "green" }
   * ```
   *
   * @example This is an example showcasing the nested extension using the dot notation.
   * ```ts
   * const options = new TailwindcssOptionsObject({
   *   colors: { primary: { dark: "blue" } },
   *   "colors.primary.light": "cyan"
   * }, {});
   *
   * options.get("colors"); // returns { primary: { dark: "blue", light: "cyan" } }
   * ```
   *
   * @generated by Chat-GPT
   * @param key The key under which the desired value and any nested overrides are stored.
   * @returns An object that merges the value at `key` with all nested dot notation entries beginning with `${key}.`.
   */
  get<K extends keyof OptionsType>(key: K): OptionsType[K] extends object ? OptionsType[K] : Record<string, unknown> {
    const result = {} as OptionsType[K] extends object ? OptionsType[K] : Record<string, unknown>;

    // Direct access
    const directObject = this.options[key];
    if (typeof directObject === 'object' && directObject !== null) {
      Object.assign(result, directObject);
    }

    // Indirect access (dot notation)
    for (const optionKey in this.options) {
      if (optionKey.startsWith(`${String(key)}.`)) {
        const path = optionKey.slice(String(key).length + 1).split('.');
        let current = result as Record<string, unknown>;

        for (let i = 0; i < path.length - 1; i++) {
          const segment = path[i] ?? '';
          if (!(segment in current) || typeof current[segment] !== 'object') {
            current[segment] = {};
          }
          current = current[segment] as Record<string, unknown>;
        }

        const lastSegment = path[path.length - 1] ?? '';
        current[lastSegment] = this.options[optionKey];
      }
    }

    return result;
  }
}
