// @generated by Chat-GPT

import { TailwindcssOptionsObject } from '@src/options/tailwindcss-options-object.ts';

type MyOptions = {
  colors: {
    [color: string]: string | string[] | Record<string, string>;
  };
  spacing?: Record<string, number>;
};

const defaultOptions: MyOptions = {
  colors: { primary: '--colors-indigo-*', secondary: '--colors-pink-*', tertiary: '--colors-lime-*' },
};

describe('TailwindcssOptionsObject#get', () => {
  it('returns default options if options are undefined.', () => {
    const instance = new TailwindcssOptionsObject<MyOptions>(undefined, defaultOptions);

    const result = instance.get('colors');

    expect(result).toEqual(defaultOptions.colors);
  });

  it('returns default options if options are empty.', () => {
    const instance = new TailwindcssOptionsObject<MyOptions>({}, defaultOptions);

    const result = instance.get('colors');

    expect(result).toEqual(defaultOptions.colors);
  });

  it('returns direct object when no dotted keys exist', () => {
    const instance = new TailwindcssOptionsObject<MyOptions>(
      { colors: { primary: 'blue', secondary: 'yellow' } },
      defaultOptions,
    );

    const result = instance.get('colors');

    expect(result).toEqual({
      primary: 'blue',
      secondary: 'yellow',
    });
  });

  it('merges dotted keys with the direct object', () => {
    const instance = new TailwindcssOptionsObject<MyOptions>(
      {
        colors: { primary: 'blue' },
        'colors.success': 'green',
      },
      defaultOptions,
    );

    const result = instance.get('colors');

    expect(result).toEqual({
      primary: 'blue',
      success: 'green',
    });
  });

  it('overrides direct object with dotted keys', () => {
    const instance = new TailwindcssOptionsObject<MyOptions>(
      {
        colors: { primary: 'blue', success: 'red' },
        'colors.success': 'green',
      },
      defaultOptions,
    );

    const result = instance.get('colors');

    expect(result).toEqual({
      primary: 'blue',
      success: 'green',
    });
  });

  it('deep merges nested keys', () => {
    const instance = new TailwindcssOptionsObject<MyOptions>(
      {
        colors: { primary: { dark: 'blue' } },
        'colors.primary.light': 'cyan',
      },
      defaultOptions,
    );

    const result = instance.get('colors');

    expect(result).toEqual({
      primary: {
        dark: 'blue',
        light: 'cyan',
      },
    });
  });

  it("don't overrides the default options if only dotted notation is being used.", () => {
    const instance = new TailwindcssOptionsObject<MyOptions>(
      {
        'colors.success': 'green',
      },
      defaultOptions,
    );

    const result = instance.get('colors');

    expect(result).toEqual({
      ...defaultOptions.colors,
      success: 'green',
    });
  });
});

describe('TailwindcssOptionsObject#merge', () => {
  it('preserves default values when not overridden', () => {
    const tailwindcssOptionsObject = new TailwindcssOptionsObject<MyOptions>({}, defaultOptions);
    expect(tailwindcssOptionsObject['options']).toEqual(defaultOptions);
  });

  it('excludes all default options when overriding object', () => {
    const tailwindcssOptionsObject = new TailwindcssOptionsObject<MyOptions>(
      { colors: { primary: '--colors-amber-*' } },
      defaultOptions,
    );
    expect(tailwindcssOptionsObject['options'].colors).toEqual({ primary: '--colors-amber-*' });
  });

  it('only preserves selected objects when overriding object with an array', () => {
    const tailwindcssOptionsObject = new TailwindcssOptionsObject<MyOptions>({ colors: ['primary'] }, defaultOptions);
    expect(tailwindcssOptionsObject['options'].colors).toEqual({ primary: '--colors-indigo-*' });
  });

  it('overrides values with colon syntax', () => {
    const tailwindcssOptionsObject = new TailwindcssOptionsObject<MyOptions>(
      { colors: 'primary: --colors-amber-*' },
      defaultOptions,
    );
    expect(tailwindcssOptionsObject['options'].colors).toEqual({ primary: '--colors-amber-*' });
  });
});
