// @generated by Chat-GPT

import { describe, it, expect } from '@jest/globals';
import attemptToParseColorValueArray, {
  repairColorValue,
  couldBeColorValueArray,
  parseAndValidateColorValueToColorValueArray,
  parseColorValueToColorValueArray,
  validateColorValueArray,
  ColorValueArraySyntaxException,
} from '@src/options/color-array.ts';

describe('couldBeColorValueArray', () => {
  it('returns true for strings starting and ending with brackets', () => {
    expect(couldBeColorValueArray('[1,2,3]')).toBe(true);
    expect(couldBeColorValueArray(' [ "a", "b" ] ')).toBe(true);
  });

  it('returns false for strings not starting and ending with brackets', () => {
    expect(couldBeColorValueArray('1,2,3')).toBe(false);
    expect(couldBeColorValueArray('"a", "b"')).toBe(false);
    expect(couldBeColorValueArray('')).toBe(false);
  });
});

describe('repairColorValue', () => {
  beforeEach(() => {
    jest.spyOn(console, 'warn').mockImplementation(() => {});
  });
  afterEach(() => {
    jest.restoreAllMocks();
  });
  it('normalizes single quotes to double quotes', () => {
    const input = "['a', 'b', 'c']";
    const output = repairColorValue(input);
    expect(output).toBe('["a", "b", "c"]');
  });

  it('replaces semicolons with commas', () => {
    const input = '["a"; "b"; "c"]';
    const output = repairColorValue(input);
    expect(output).toBe('["a", "b", "c"]');
  });

  it('adds quotes if none are present', () => {
    const input = '[a, b, c]';
    const output = repairColorValue(input);
    expect(output).toBe('["a", "b", "c"]');
  });

  it('handles space-separated items', () => {
    const input = '[a b c]';
    const output = repairColorValue(input);
    expect(output).toBe('["a", "b", "c"]');
  });

  it('removes empty strings', () => {
    const input = '["a", "", "b", ""]';
    const output = repairColorValue(input);
    expect(output).toBe('["a", "b"]');
  });

  it('removes trailing commas', () => {
    const input = '["a", "b", "c", ]';
    const output = repairColorValue(input);
    expect(output).toBe('["a", "b", "c"]');
  });
});

describe('parseColorValueToColorValueArray', () => {
  it('parses valid JSON array', () => {
    expect(parseColorValueToColorValueArray('["a","b"]')).toEqual(['a', 'b']);
  });

  it('throws ColorValueArraySyntaxException on invalid JSON', () => {
    expect(() => parseColorValueToColorValueArray('not a json')).toThrow(ColorValueArraySyntaxException);
  });
});

describe('ColorValueArraySyntaxException', () => {
  it('sets the correct message', () => {
    const err = new ColorValueArraySyntaxException('bad syntax');
    expect(err.message).toContain('bad syntax');
  });
});
