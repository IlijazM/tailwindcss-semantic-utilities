// @generated by Chat-GPT

import { describe, expect, it } from '@jest/globals';

import { toColorArray } from '@/src/options/to-color-array.ts';
import { TAILWIND_COLORS_STEPS } from '@src/common.ts';

describe('toColorArray', () => {
  it('returns single variable repeated for each step when input has no color-* prefix', () => {
    const result = toColorArray('white');

    expect(result).toEqual(Array(TAILWIND_COLORS_STEPS.length).fill('white'));
  });

  it('expands a variable with prefix "color-" and suffix "-*"', () => {
    const result = toColorArray('color-indigo-*');

    expect(result).toEqual(TAILWIND_COLORS_STEPS.map((step) => `var(--color-indigo-${step})`));
  });

  it('expands a variable with prefix "var(--color-" and suffix "-*")', () => {
    const result = toColorArray('var(--color-indigo-*)');

    expect(result).toEqual(TAILWIND_COLORS_STEPS.map((step) => `var(--color-indigo-${step})`));
  });

  it('expands a variable with prefix "--color-" and suffix "-*)" (ending paren)', () => {
    const result = toColorArray('--color-indigo-*)');

    expect(result).toEqual(TAILWIND_COLORS_STEPS.map((step) => `var(--color-indigo-${step})`));
  });

  it('removes suffix ")" and generates correct output', () => {
    const result = toColorArray('var(--color-sky-500)');

    expect(result).toEqual(TAILWIND_COLORS_STEPS.map((step) => `var(--color-sky-500-${step})`));
  });

  it('handles suffix "-*)"', () => {
    const result = toColorArray('color-rose-*)');

    expect(result).toEqual(TAILWIND_COLORS_STEPS.map((step) => `var(--color-rose-${step})`));
  });

  it('handles suffix "-*"', () => {
    const result = toColorArray('color-teal-*');

    expect(result).toEqual(TAILWIND_COLORS_STEPS.map((step) => `var(--color-teal-${step})`));
  });

  it('handles mixed and invalid inputs gracefully', () => {
    const result = toColorArray('--some-random-value');

    expect(result).toEqual(Array(TAILWIND_COLORS_STEPS.length).fill('--some-random-value'));
  });
});
